// Code generated by go-bindata.
// sources:
// templates/index.tpl
// templates/package.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x50\x9c\x36\x49\xf9\x29\x95\x40\x9a\xd3\xa6\x14\xc4\xe5\xe4\xac\xae\x56\x28\x4a\xcc\x4b\x4f\x55\x50\xc9\x4e\xad\xd4\x51\x50\x29\x4b\xcc\x29\x4d\x55\xb0\xb2\x55\xd0\x0b\x48\x4c\xce\x4e\x4c\x4f\x2d\x56\xa8\xad\x05\x29\xe4\xb4\xc9\xc9\xb4\x03\xaa\x06\xa9\x03\x0a\x29\xe8\x2a\x80\x38\x60\xe5\x7a\x41\xa9\x05\xf9\x40\x31\x1b\x7d\xa0\x12\xa8\xa1\xa9\x79\x29\x10\x8d\x36\xfa\x60\x9b\x6c\xf4\x21\x36\xdb\xe8\x43\x5c\x02\x08\x00\x00\xff\xff\xb2\xe2\x86\x15\xa1\x00\x00\x00")

func templatesIndexTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTpl,
		"templates/index.tpl",
	)
}

func templatesIndexTpl() (*asset, error) {
	bytes, err := templatesIndexTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl", size: 161, mode: os.FileMode(420), modTime: time.Unix(1470608150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPackageTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\xc1\x4e\x03\x21\x10\x86\xef\x3e\xc5\x88\xe7\x2e\x9e\x95\xed\xa5\x7a\x6b\xb4\x69\xf4\xe0\x11\x77\xa7\x2c\x09\x30\x2b\xcc\x36\x31\x64\xdf\x5d\xda\xad\xa9\x89\x6b\x2c\x17\x60\x20\xdf\xf7\xc3\xa8\xeb\x87\xe7\xd5\xcb\xdb\xe6\x11\x3a\xf6\x6e\x79\xa5\xa6\x09\xca\x50\x1d\xea\x76\x5a\x1e\xb7\x1e\x59\x43\xd0\x1e\x6b\x61\x68\x61\x7d\x4f\x91\x05\x34\x14\x18\x03\xd7\x22\x67\xa8\x56\x3a\x50\xb0\x8d\x76\xaf\xdb\x35\x8c\x23\x18\xcb\x85\xcb\x7d\xba\x93\xf2\x70\xbe\xc5\x9e\x4a\x5d\xfc\x49\x4d\x34\xc4\x06\xff\xa1\xce\x10\xe7\x6a\x92\x23\xa2\xf4\x3a\x31\xc6\x2c\x5b\x1b\x2f\xbc\x25\xf3\xce\x3a\x1c\x6f\xd6\xd9\xd9\x80\xbf\xc3\x1e\x20\x0b\xfc\x18\xec\xbe\x16\x11\x77\x11\x53\xf7\x23\xf0\xed\x3d\x0c\xd1\xd5\xdf\x26\x43\x2d\x35\x15\x45\x23\x67\x5e\x72\x42\x2b\x79\xfe\x69\xf5\x4e\xed\xe7\xd9\xf8\x44\xdc\xd9\x60\x80\x09\x12\x22\x74\x18\xb1\x82\x8d\x43\x9d\x10\x54\x89\x52\xfc\xb5\xb8\xd0\xe5\x69\x8f\xa0\x1d\x05\xa3\xa4\x5e\x56\x27\xf5\xe4\x2b\x11\x8e\x7d\xff\x0a\x00\x00\xff\xff\x5e\xf2\xcf\x26\x0f\x02\x00\x00")

func templatesPackageTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPackageTpl,
		"templates/package.tpl",
	)
}

func templatesPackageTpl() (*asset, error) {
	bytes, err := templatesPackageTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/package.tpl", size: 527, mode: os.FileMode(420), modTime: time.Unix(1470608150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tpl": templatesIndexTpl,
	"templates/package.tpl": templatesPackageTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tpl": &bintree{templatesIndexTpl, map[string]*bintree{}},
		"package.tpl": &bintree{templatesPackageTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

